{"mappings":"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","sources":["lib/index.ts","lib/lib.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport cp from \"child_process\";\nimport meow from \"meow\";\nimport { syncEnv } from \"./lib\";\n\nconst cli = meow(\n\t`\n\tUsage: sync-dotenv [options]\n\n\tOptions:\n\t\n\t-e, --env file .......... .env file location\n\t-s, --sample file ....... alternate sample env file to sync with\n\t-S, --samples \"file.*\" ........ alternate sample env files pattern to sync with\n\n\n\tNote: If options is omitted, sync-dotenv will attempt to sync .env \n\twith .env.example in the current working directory.\n\n\tExamples:\n\t\n\t$ sync-dotenv \n\t$ sync-dotenv --sample .env.development\n\t$ sync-dotenv --env server/.env --sample example.env\n\t$ sync-dotenv --samples \".env.*\"\n`,\n\t{\n\t\tflags: {\n\t\t\tsample: {\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t}\n\t}\n);\n\nconst { sample, s, env, e, samples, S } = cli.flags;\n\nsyncEnv(sample || s, env || e, samples || S)\n\t.then(sampleEnv => cp.exec(`git add ${sampleEnv}`))\n\t.catch(({ message, code }) => {\n\t\tconsole.log(message);\n\t\tprocess.exit(code);\n\t});\n\nexport default syncEnv;\n","import { resolve, basename } from \"path\";\nimport fs from \"fs\";\nimport os from 'os';\nimport parseEnv from \"parse-dotenv\";\nimport globby from \"globby\";\nimport pkgConf from \"pkg-conf\";\n\nconst DEFAULT_ENV_PATH = resolve(process.cwd(), \".env\");\nconst DEFAULT_SAMPLE_ENV = resolve(process.cwd(), \".env.example\");\n\ninterface EnvObject {\n\t[key: string]: any;\n}\n\ninterface Config {\n\tpreserve?: [string];\n\temptyLines?: boolean;\n\tcomments?: boolean;\n}\n\nexport const fileExists = (path: string) => fs.existsSync(path);\n\nexport const getObjKeys = (obj: object) => Object.keys(obj);\n\nexport const envToString = (parsed: EnvObject) =>\n\tgetObjKeys(parsed)\n\t\t.map(key => `${key}=${parsed[key] || \"\"}`)\n\t\t.join(os.EOL)\n\t\t.replace(/(__\\w+_\\d+__=)/g, \"\");\n\nexport const writeToSampleEnv = (path: string, parsedEnv: object) => {\n\ttry {\n\t\tfs.writeFileSync(path, envToString(parsedEnv));\n\t} catch (e) {\n\t\tthrow new Error(`Sync failed. ${e.message}`);\n\t}\n};\n\nexport const emptyObjProps = (obj: EnvObject) => {\n\tconst objCopy = { ...obj };\n\tObject.keys(objCopy).forEach(key => {\n\t\tif (objCopy[key].includes(\"#\")) {\n\t\t\tif (objCopy[key].match(/(\".*\"|'.*')/g)) {\n\t\t\t\tconst objArr = objCopy[key].split(/(\".*\"|'.*')/);\n\t\t\t\tobjCopy[key] = objArr.slice(-1)[0].trim();\n\t\t\t} else {\n\t\t\t\tconst objArr = objCopy[key].split(\"#\");\n\t\t\t\tobjCopy[key] = `#${objArr.slice(-1)[0]}`;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t/* istanbul ignore else */\n\t\tif (!key.startsWith(\"__COMMENT_\")) {\n\t\t\tobjCopy[key] = \"\";\n\t\t}\n\t});\n\n\treturn objCopy;\n};\n\nexport const getUniqueVarsFromEnvs = async (\n\tenv: EnvObject,\n\tenvExample: EnvObject,\n\tconfig: Config = {}\n) => {\n\tlet ignoreKeys = config.preserve || [];\n\n\tconst uniqueKeys = new Set(getObjKeys(env));\n\tconst uniqueKeysArray: Array<string> = Array.from(uniqueKeys);\n\n\tlet uniqueFromSource = uniqueKeysArray.map((key: string) => {\n\t\tif (key.startsWith(\"__COMMENT_\")) return { [key]: env[key] };\n\t\treturn { [key]: envExample[key] || \"\" };\n\t});\n\n\tlet presevedVars = getObjKeys(envExample)\n\t\t.map(key => ({ [key]: envExample[key] }))\n\t\t.filter(env => {\n\t\t\treturn ignoreKeys.length && ignoreKeys.includes(getObjKeys(env)[0]);\n\t\t});\n\n\treturn [...uniqueFromSource, ...presevedVars];\n};\n\nexport const syncWithSampleEnv = async (\n\tenvPath: string,\n\tenvExamplePath: string,\n\tinitialConfig?: Config\n) => {\n\t// We do this so we can pass it via test as well\n\tlet config: Config = initialConfig || (await pkgConf(\"sync-dotenv\")) as any;\n\n\t// Set defaults\n\tconfig.comments = typeof config.comments === 'undefined' ? true : config.comments;\n\tconfig.emptyLines = typeof config.emptyLines === 'undefined' ? true : config.comments;\n\n\tlet sourceEnv = emptyObjProps(\n\t\tparseEnv(envPath, { emptyLines: !!config.emptyLines, comments: !!config.comments })\n\t);\n\tlet targetEnv = parseEnv(envExamplePath);\n\n\tconst uniqueVars = await getUniqueVarsFromEnvs(sourceEnv, targetEnv, config);\n\tlet envCopy: EnvObject = {};\n\tuniqueVars.forEach(env => {\n\t\tlet [key] = getObjKeys(env);\n\t\tenvCopy[key] = env[key];\n\t});\n\n\twriteToSampleEnv(envExamplePath, envCopy);\n};\n\nconst exit = (message: string, code: number = 1) =>\n\tPromise.reject({ message, code });\n\nexport const syncEnv = async (\n\tsampleEnv?: string,\n\tsource?: string,\n\tsamples?: string\n): Promise<{ msg: string; code: number } | string> => {\n\tif (sampleEnv && (sampleEnv === \".env\" || basename(sampleEnv) === \".env\"))\n\t\treturn exit(\"Cannot sync .env with .env\");\n\n\tconst SAMPLE_ENV_PATHS: string[] = !samples\n\t\t? [resolve(process.cwd(), sampleEnv || DEFAULT_SAMPLE_ENV)]\n\t\t: globby\n\t\t\t.sync(samples)\n\t\t\t.map((sample: string) => resolve(process.cwd(), sample));\n\n\tlet envPath = source\n\t\t? fileExists(source)\n\t\t\t? source\n\t\t\t: null\n\t\t: DEFAULT_ENV_PATH;\n\n\tif (envPath === null) return exit(`${source} not found`);\n\n\tif (!source && !fileExists(envPath)) return exit(\".env doesn't exists\");\n\n\tif (!SAMPLE_ENV_PATHS.length)\n\t\treturn exit(`${samples} did not match any file`);\n\n\tif (!fileExists(SAMPLE_ENV_PATHS[0]))\n\t\treturn exit(`${sampleEnv || basename(DEFAULT_SAMPLE_ENV)} not found`);\n\n\tconst sourcePath = envPath;\n\n\tfor (let samplePath of SAMPLE_ENV_PATHS) {\n\t\tawait syncWithSampleEnv(sourcePath, samplePath);\n\t}\n\n\treturn Promise.resolve(SAMPLE_ENV_PATHS.join(\" \"));\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}